// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: protobuf/service/coupon_service.proto

package serviceconnect

import (
	context "context"
	errors "errors"
	service "github.com/Sujin1135/coupon-service-interface/protobuf/service"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// GreetServiceName is the fully-qualified name of the GreetService service.
	GreetServiceName = "io.coupon.service.GreetService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GreetServiceCreateCampaignProcedure is the fully-qualified name of the GreetService's
	// CreateCampaign RPC.
	GreetServiceCreateCampaignProcedure = "/io.coupon.service.GreetService/CreateCampaign"
	// GreetServiceIssueCouponProcedure is the fully-qualified name of the GreetService's IssueCoupon
	// RPC.
	GreetServiceIssueCouponProcedure = "/io.coupon.service.GreetService/IssueCoupon"
	// GreetServiceGetCampaignProcedure is the fully-qualified name of the GreetService's GetCampaign
	// RPC.
	GreetServiceGetCampaignProcedure = "/io.coupon.service.GreetService/GetCampaign"
)

// GreetServiceClient is a client for the io.coupon.service.GreetService service.
type GreetServiceClient interface {
	CreateCampaign(context.Context, *connect_go.Request[service.CreateCampaignRequest]) (*connect_go.Response[service.CreateCampaignResponse], error)
	IssueCoupon(context.Context, *connect_go.Request[service.IssueCouponRequest]) (*connect_go.Response[service.IssueCouponResponse], error)
	GetCampaign(context.Context, *connect_go.Request[service.GetCampaignRequest]) (*connect_go.Response[service.GetCampaignResponse], error)
}

// NewGreetServiceClient constructs a client for the io.coupon.service.GreetService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGreetServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) GreetServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &greetServiceClient{
		createCampaign: connect_go.NewClient[service.CreateCampaignRequest, service.CreateCampaignResponse](
			httpClient,
			baseURL+GreetServiceCreateCampaignProcedure,
			opts...,
		),
		issueCoupon: connect_go.NewClient[service.IssueCouponRequest, service.IssueCouponResponse](
			httpClient,
			baseURL+GreetServiceIssueCouponProcedure,
			opts...,
		),
		getCampaign: connect_go.NewClient[service.GetCampaignRequest, service.GetCampaignResponse](
			httpClient,
			baseURL+GreetServiceGetCampaignProcedure,
			opts...,
		),
	}
}

// greetServiceClient implements GreetServiceClient.
type greetServiceClient struct {
	createCampaign *connect_go.Client[service.CreateCampaignRequest, service.CreateCampaignResponse]
	issueCoupon    *connect_go.Client[service.IssueCouponRequest, service.IssueCouponResponse]
	getCampaign    *connect_go.Client[service.GetCampaignRequest, service.GetCampaignResponse]
}

// CreateCampaign calls io.coupon.service.GreetService.CreateCampaign.
func (c *greetServiceClient) CreateCampaign(ctx context.Context, req *connect_go.Request[service.CreateCampaignRequest]) (*connect_go.Response[service.CreateCampaignResponse], error) {
	return c.createCampaign.CallUnary(ctx, req)
}

// IssueCoupon calls io.coupon.service.GreetService.IssueCoupon.
func (c *greetServiceClient) IssueCoupon(ctx context.Context, req *connect_go.Request[service.IssueCouponRequest]) (*connect_go.Response[service.IssueCouponResponse], error) {
	return c.issueCoupon.CallUnary(ctx, req)
}

// GetCampaign calls io.coupon.service.GreetService.GetCampaign.
func (c *greetServiceClient) GetCampaign(ctx context.Context, req *connect_go.Request[service.GetCampaignRequest]) (*connect_go.Response[service.GetCampaignResponse], error) {
	return c.getCampaign.CallUnary(ctx, req)
}

// GreetServiceHandler is an implementation of the io.coupon.service.GreetService service.
type GreetServiceHandler interface {
	CreateCampaign(context.Context, *connect_go.Request[service.CreateCampaignRequest]) (*connect_go.Response[service.CreateCampaignResponse], error)
	IssueCoupon(context.Context, *connect_go.Request[service.IssueCouponRequest]) (*connect_go.Response[service.IssueCouponResponse], error)
	GetCampaign(context.Context, *connect_go.Request[service.GetCampaignRequest]) (*connect_go.Response[service.GetCampaignResponse], error)
}

// NewGreetServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGreetServiceHandler(svc GreetServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	greetServiceCreateCampaignHandler := connect_go.NewUnaryHandler(
		GreetServiceCreateCampaignProcedure,
		svc.CreateCampaign,
		opts...,
	)
	greetServiceIssueCouponHandler := connect_go.NewUnaryHandler(
		GreetServiceIssueCouponProcedure,
		svc.IssueCoupon,
		opts...,
	)
	greetServiceGetCampaignHandler := connect_go.NewUnaryHandler(
		GreetServiceGetCampaignProcedure,
		svc.GetCampaign,
		opts...,
	)
	return "/io.coupon.service.GreetService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GreetServiceCreateCampaignProcedure:
			greetServiceCreateCampaignHandler.ServeHTTP(w, r)
		case GreetServiceIssueCouponProcedure:
			greetServiceIssueCouponHandler.ServeHTTP(w, r)
		case GreetServiceGetCampaignProcedure:
			greetServiceGetCampaignHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGreetServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGreetServiceHandler struct{}

func (UnimplementedGreetServiceHandler) CreateCampaign(context.Context, *connect_go.Request[service.CreateCampaignRequest]) (*connect_go.Response[service.CreateCampaignResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("io.coupon.service.GreetService.CreateCampaign is not implemented"))
}

func (UnimplementedGreetServiceHandler) IssueCoupon(context.Context, *connect_go.Request[service.IssueCouponRequest]) (*connect_go.Response[service.IssueCouponResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("io.coupon.service.GreetService.IssueCoupon is not implemented"))
}

func (UnimplementedGreetServiceHandler) GetCampaign(context.Context, *connect_go.Request[service.GetCampaignRequest]) (*connect_go.Response[service.GetCampaignResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("io.coupon.service.GreetService.GetCampaign is not implemented"))
}
